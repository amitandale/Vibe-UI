name: test-coverage
on:
  push:
  pull_request:
jobs:
  test-coverage:
    runs-on: [self-hosted, linux]
    env:
      NODE_V8_COVERAGE: coverage/tmp
      PROFILE: default
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18.20.8'
      - name: Ensure dependencies (idempotent, Ubuntu)
        shell: bash
        run: |
          set -euo pipefail
          LOCK_HASH="$(test -f package-lock.json && sha256sum package-lock.json | cut -d' ' -f1 || echo nolock)"
          if [[ -d node_modules && -f node_modules/.installedLockHash && "$(cat node_modules/.installedLockHash)" == "$LOCK_HASH" ]]; then
            echo "Dependencies up to date. Skipping install."
          else
            if [[ -f package-lock.json || -f npm-shrinkwrap.json ]]; then
              npm ci --prefer-offline --no-audit --fund=false
            else
              npm i --prefer-offline --no-audit --fund=false
            fi
            mkdir -p node_modules
            echo "$LOCK_HASH" > node_modules/.installedLockHash
          fi
      - name: Prepare coverage directory
        run: mkdir -p coverage/tmp



      - name: Syntax validation (ESM .mjs repo-wide)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -d '' FILES < <(find . -path ./node_modules -prune -o -path ./.next -prune -o -path ./coverage -prune -o -path ./dist -prune -o -path ./build -prune -o -type f -name '*.mjs' -print0)
          echo "ESM files: ${#FILES[@]}"
          for f in "${FILES[@]}"; do node --check "$f"; done
      - name: Syntax validation (JS/JSX/TS/TSX via @babel/parser)
        shell: bash
        run: |
          set -euo pipefail
          npx --yes -p @babel/parser node - <<'NODE'
          const fs=require('fs'), path=require('path'); 
          const parser=require('@babel/parser');
          const skip=new Set(['node_modules','.next','coverage','dist','build']);
          const exts=new Set(['.js','.jsx','.ts','.tsx']);
          let count=0, failed=0;
          function* walk(d){ for(const e of fs.readdirSync(d,{withFileTypes:true})){
            if(e.name.startsWith('.git')) continue; const p=path.join(d,e.name);
            if(e.isDirectory()){ if(!skip.has(e.name)) yield* walk(p); continue; }
            if(exts.has(path.extname(e.name))) yield p;
          } }
          for(const f of walk(process.cwd())){ 
            count++; const code=fs.readFileSync(f,'utf8'); 
            try{ parser.parse(code,{sourceType:'module',allowReturnOutsideFunction:true,plugins:['jsx','typescript','importMeta','topLevelAwait']}); }
            catch(e){ console.error('\nSyntax error in', f); console.error(e.message); failed=1; }
          }
          console.log('JS-like files:', count);
          process.exit(failed);
          NODE

      - name: Run tests (Node runner)
        shell: bash
        run: |
          set -euo pipefail
          echo "node $(node -v); npm $(npm -v)"
          # If package.json has a test script, use it; else run node --test directly
          if node -e "try{process.exit(require('./package.json').scripts && require('./package.json').scripts.test ? 0 : 1)}catch(e){process.exit(1)}" ; then
            echo "Running npm test"
            npm run -s test
          else
            echo "No npm test script. Running node --test"
            node --test
          fi
      - name: Coverage summary (text)
        run: npx c8 report --reporter=text
      - name: Coverage artifact (lcov)
        run: npx c8 report --reporter=lcov
      - name: Upload lcov
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov-default
          path: coverage/lcov.info
          if-no-files-found: ignore
