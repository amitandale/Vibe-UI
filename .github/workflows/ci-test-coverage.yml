name: test-coverage
on:
  push:
  pull_request:
jobs:
  test-coverage:
    runs-on: [self-hosted, linux]
    env:
      NODE_V8_COVERAGE: coverage/tmp
      PROFILE: default
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18.20.8'
      - name: Ensure dependencies (idempotent)
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            LOCK_HASH="$(sha256sum package-lock.json | cut -d' ' -f1)"
          else
            LOCK_HASH="nolock"
          fi
          if [ -d node_modules ] && [ -f node_modules/.installedLockHash ] && [ "$(cat node_modules/.installedLockHash)" = "$LOCK_HASH" ]; then
            echo "Dependencies up to date. Skipping install."
          else
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci --prefer-offline --no-audit --fund=false
            else
              npm i --prefer-offline --no-audit --fund=false
            fi
            echo "$LOCK_HASH" > node_modules/.installedLockHash
          fi
      - name: Prepare coverage directory
        run: mkdir -p coverage/tmp


      - name: Syntax validation (ESM .mjs repo-wide)
        run: |
          set -euo pipefail
          while IFS= read -r -d '' f; do
            node --check "$f"
          done < <(find . \
                   -path ./node_modules -prune -o \
                   -path ./.next -prune -o \
                   -path ./coverage -prune -o \
                   -path ./dist -prune -o \
                   -path ./build -prune -o \
                   -type f -name '*.mjs' -print0)
      - name: Syntax validation (JS/JSX/TS/TSX via @babel/parser, repo-wide)
        run: |
          set -euo pipefail
          npx --yes -p @babel/parser node - <<'NODE'
          const fs=require('fs'), path=require('path'); 
          const parser=require('@babel/parser');
          const skip=new Set(['node_modules','.next','coverage','dist','build']);
          const exts=new Set(['.js','.jsx','.ts','.tsx']);
          function* walk(dir){
            for(const ent of fs.readdirSync(dir,{withFileTypes:true})){
              if(ent.name.startsWith('.git')) continue;
              const p=path.join(dir,ent.name);
              if(ent.isDirectory()){ if(!skip.has(ent.name)) yield* walk(p); continue; }
              if(exts.has(path.extname(ent.name))) yield p;
            }
          }
          let failed=0;
          for(const f of walk(process.cwd())){
            const code=fs.readFileSync(f,'utf8');
            try{ 
              parser.parse(code,{sourceType:'module',allowReturnOutsideFunction:true,plugins:['jsx','typescript','importMeta','topLevelAwait']}); 
            }catch(e){ 
              console.error('\nSyntax error in', f); 
              console.error(e.message); 
              failed=1; 
            }
          }
          process.exit(failed);
          NODE

      - name: Run tests (Node runner)
        run: npm run -s test
      - name: Coverage summary (text)
        run: npx c8 report --reporter=text
      - name: Coverage artifact (lcov)
        run: npx c8 report --reporter=lcov
      - name: Upload lcov
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov-default
          path: coverage/lcov.info
          if-no-files-found: ignore
