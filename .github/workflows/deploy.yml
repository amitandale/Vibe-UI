name: Deploy Studio

on:
  push:
    branches: [work, main]

concurrency:
  group: studio-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  gate:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      statuses: read
    env:
      CI_NAME: CI
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Wait for CI success
        run: |
          set -euo pipefail
          echo "Waiting for CI '$CI_NAME' on $GITHUB_REF_NAME sha=$GITHUB_SHA"
          for i in $(seq 1 120); do
            json="$(curl -fsS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs?event=push&branch=${GITHUB_REF_NAME}&per_page=100")" || true
            status=2
            echo "$json" | node -e "const fs=require('fs');const o=JSON.parse(fs.readFileSync(0,'utf8'));const sha=process.env.GITHUB_SHA;const name=process.env.CI_NAME||'CI';const runs=o.workflow_runs.filter(w=>w.head_sha===sha && w.name===name);if(!runs.length)process.exit(2);const r=runs[0];if(r.status!=='completed')process.exit(2);if(r.conclusion==='success')process.exit(0);if(['failure','cancelled','timed_out','action_required'].includes(r.conclusion))process.exit(1);process.exit(2);" || status=$?
            if [ "${status}" = "0" ]; then
              echo "CI succeeded"; exit 0
            elif [ "${status}" = "1" ]; then
              echo "CI failed"; exit 1
            else
              sleep 10
            fi
          done
          echo "Timeout waiting for CI"; exit 2
    runs-on: [self-hosted, linux, x64]
    needs: gate
    environment:
      name: ${{ github.ref_name == 'work' && 'dev' || 'prod' }}

    env:
      SRV_DIR: /srv/vibe/vibe-ui
      ENV_DIR: /etc/vibe
      ENV_FILE: /etc/vibe/studio.env
      SERVICE: vibe-studio

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Wait for CI workflow success
        if: ${{ github.ref_name == 'work' || github.ref_name == 'main' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI_NAME: ${{ vars.CI_WORKFLOW_NAME || 'CI' }}
        run: |
          set -euo pipefail
          echo "Waiting for CI '$CI_NAME' on $GITHUB_REF_NAME sha=$GITHUB_SHA"
          for i in $(seq 1 90); do
            json="$(curl -fsS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs?event=push&branch=${GITHUB_REF_NAME}&per_page=100")"
            code=$?
            if [ $code -ne 0 ]; then
              echo "API error, retrying..."; sleep 5; continue
            fi
            echo "$json" | node -e "const fs=require('fs');const o=JSON.parse(fs.readFileSync(0,'utf8'));const sha=process.env.GITHUB_SHA;const name=process.env.CI_NAME;const runs=o.workflow_runs.filter(w=>w.head_sha===sha && w.name===name);if(!runs.length)process.exit(2);const r=runs[0];if(r.status!=='completed')process.exit(2);if(r.conclusion==='success')process.exit(0);if(['failure','cancelled','timed_out','action_required'].includes(r.conclusion))process.exit(1);process.exit(2);" || status=$?
            status=${status:-0}
            if [ "${status}" = "0" ]; then
              echo "CI succeeded"; break
            elif [ "${status}" = "1" ]; then
              echo "CI failed"; exit 1
            else
              sleep 10
            fi
            unset status
          done

      - name: Bootstrap system user, dirs, and unit
        run: |
          set -euxo pipefail
          sudo id -u vibe >/dev/null 2>&1 || sudo useradd -r -s /usr/sbin/nologin vibe
          sudo install -d -m 755 /srv/vibe
          sudo install -d -m 755 "$SRV_DIR"
          sudo install -d -m 755 "$ENV_DIR"
          sudo install -m 644 ./.deploy/systemd/vibe-studio.service /etc/systemd/system/vibe-studio.service

      - name: Build-time env for Next.js
        run: |
          set -euxo pipefail
          cat > .env.production.local <<'EOF'
          NEXT_PUBLIC_STUDIO_BILLING=on
          EOF

      - name: Install deps and build
        run: |
          npm ci
          npm run build

      - name: Stop service before deploy
        run: |
          sudo systemctl stop $SERVICE || true

      - name: Sync build to /srv
        run: |
          set -euxo pipefail
          sudo rsync -a --delete --exclude '.git' --exclude 'node_modules' ./ "$SRV_DIR/"
          sudo chown -R vibe:vibe "$SRV_DIR"

      - name: Write runtime env (from environment secrets/vars)
        run: |
          set -euxo pipefail
          sudo install -m 600 /dev/stdin "$ENV_FILE" <<'EOF'
          NODE_ENV=production
          PORT=${{ vars.STUDIO_PORT || 3001 }}
          VIBE_HMAC_SECRET=${{ secrets.VIBE_HMAC_SECRET }}
          ORCH_URL=http://127.0.0.1
          EOF

      - name: Start and enable service
        run: |
          set -euxo pipefail
          sudo systemctl daemon-reload
          sudo systemctl enable $SERVICE
          sudo systemctl start $SERVICE
          sleep 2
          sudo systemctl --no-pager --full status $SERVICE || true

      - name: Health check
        run: |
          set -euxo pipefail
          curl -sSf "http://127.0.0.1:${{ vars.STUDIO_PORT || 3001 }}/app/api/billing/prices" >/dev/null