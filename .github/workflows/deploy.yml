name: Deploy UI

on:
  push:
    branches: [work, main]

concurrency:
  group: ui-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted, linux, x64]

    environment:
      name: ${{ github.ref_name == 'work' && 'dev' || 'prod' }}

    env:
      SRV_DIR: /srv/vibe/vibe-ui
      ENV_DIR: /etc/vibe
      ENV_FILE: /etc/vibe/vibe-ui.env
      SERVICE: vibe-studio

    steps:
      - name: "Guard: require CI green for this SHA"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI_WORKFLOW_FILE: ci-test-coverage.yml
          POLL_INTERVAL: '3'
          MAX_WAIT_SECONDS: '900'
        run: |
          set -euo pipefail
          API="https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/workflows/${CI_WORKFLOW_FILE}/runs?per_page=50"
          echo "Check CI for ${GITHUB_SHA} in ${CI_WORKFLOW_FILE} (pass if any completed success exists)"
          curl -fsS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "$API" \
          | node -e "
            const fs=require('fs');
            const o=JSON.parse(fs.readFileSync(0,'utf8')||'{}');
            const sha=process.env.GITHUB_SHA;
            const runs=(o.workflow_runs||[]).filter(w=>w && w.head_sha===sha);
            if(!runs.length){
              console.error('CI run for SHA not found');
              process.exit(2);
            }
            const anySuccess=runs.some(w=>w.status==='completed' && w.conclusion==='success');
            const anyCompletedNonSuccess=runs.some(w=>w.status==='completed' && w.conclusion && w.conclusion!=='success');
            if(anySuccess){
              console.log('CI is green for this SHA (at least one completed success).');
              process.exit(0);
            }
            if(anyCompletedNonSuccess){
              const r=runs.find(w=>w.status==='completed' && w.conclusion && w.conclusion!=='success');
              console.error('CI completed non-green: conclusion=%s', r && r.conclusion);
              process.exit(1);
            }
            // Only queued/in_progress runs exist, but no completed success yet
            const r=runs[0]||{};
            console.error('CI not green yet: status=%s conclusion=%s', r.status, r.conclusion);
            process.exit(1);
          "
      - name: Checkout
        uses: actions/checkout@v4
      - name: Bootstrap system user, dirs, and unit
        run: |
          set -euxo pipefail
          sudo id -u vibe >/dev/null 2>&1 || sudo useradd -r -s /usr/sbin/nologin vibe
          sudo install -d -m 755 /srv/vibe
          sudo install -d -m 755 "$SRV_DIR"
          sudo install -d -m 755 "$ENV_DIR"
          sudo install -m 644 ./.deploy/systemd/vibe-studio.service /etc/systemd/system/vibe-studio.service

      - name: Write runtime env (from environment secrets/vars)
        run: |
          set -euxo pipefail
          sudo install -m 600 /dev/stdin "$ENV_FILE" <<'EOF'
          NODE_ENV=production
          PORT=${{ vars.STUDIO_PORT || 3001 }}
          VIBE_HMAC_SECRET=${{ secrets.VIBE_HMAC_SECRET }}
          LLM_PROVIDER=${{ vars.LLM_PROVIDER || 'mock' }}
          LLM_MODEL=${{ vars.LLM_MODEL || 'pplx-quickstart' }}
          LLM_TIMEOUT_MS=${{ vars.LLM_TIMEOUT_MS || 10000 }}
          BILLING_ENFORCE=1
          LLM_API_EXPOSE=
          EOF

      - name: Stop service before deploy
        run: |
          sudo systemctl stop $SERVICE || true

      - name: Sync code to /srv
        run: |
          set -euxo pipefail
          sudo rsync -a --delete --exclude '.git' --exclude 'node_modules' ./ "$SRV_DIR/"
          sudo chown -R vibe:vibe "$SRV_DIR"

      - name: Install production deps
        working-directory: ${{ env.SRV_DIR }}
        run: |
          set -euo pipefail
          sudo -u vibe env HOME=/home/vibe bash -lc '
            set -euo pipefail;
            cd /srv/vibe/vibe-ui && \
            ( npm ci || ( npm install --package-lock-only && npm ci ) ) && \
            npx next build && \
            npm prune --omit=dev
          '
      - name: Install deps (prod)
        run: |
          set -euxo pipefail
          sudo -u vibe bash -lc 'cd /srv/vibe/vibe-ui && npm ci --omit=dev'
      - name: Ensure vibe HOME
        run: |
          set -euxo pipefail
          sudo install -d -m 755 -o vibe -g vibe /home/vibe
      - name: Install deps and build
        run: |
          set -euxo pipefail
          sudo -u vibe env HOME=/home/vibe bash -lc 'cd /srv/vibe/vibe-ui && npm ci --omit=dev && npx next build'
      - name: Start and enable service
        run: |
          set -euo pipefail
          SERVICE="${SERVICE:-vibe-studio}"
          PORT="${{ vars.STUDIO_PORT || 3001 }}"
          UNIT="/etc/systemd/system/${SERVICE}.service"
          if [ ! -f "$UNIT" ]; then
            printf '%s\n' \
              '[Unit]' \
              'Description=Vibe UI' \
              'After=network.target' \
              '' \
              '[Service]' \
              'User=vibe' \
              'WorkingDirectory=/srv/vibe/vibe-ui' \
              'Environment=NODE_ENV=production' \
              "Environment=PORT=${PORT}" \
              "ExecStart=/usr/bin/env bash -lc 'npx next start -p ${PORT}'" \
              'Restart=always' \
              'RestartSec=2' \
              'KillSignal=SIGINT' \
              '' \
              '[Install]' \
              'WantedBy=multi-user.target' | sudo tee "$UNIT" >/dev/null
          fi
          sudo systemctl daemon-reload
          sudo systemctl enable "$SERVICE"
          sudo systemctl restart "$SERVICE"
          sleep 2
          sudo systemctl --no-pager --full status "$SERVICE" || true
      - name: Health check
        run: |
          set -euo pipefail
          URL="http://127.0.0.1:${{ vars.STUDIO_PORT || 3001 }}/"
          echo "Probing ${URL}"
          for i in $(seq 1 30); do
            if curl -fsS "$URL" >/dev/null; then echo OK; exit 0; fi
            sleep 1
          done
          echo "Service not responding"
          curl -v "$URL"
          exit 1